===== File: main.c =====
#include "raylib.h"
#include <stdlib.h>
#include <time.h>
#include "constants.h"
#include "gem.h"

int main(void)
{
    // Initialization
    //--------------------------------------------------------------------------------------
    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "10x10 Grid using Raylib");

    // Seed the random number generator
    srand(time(NULL));

    // Load the sprite sheets
    Texture2D gemBlueSpriteSheet = LoadTexture("assets/images/gem_blue.png");
    Texture2D gemGreenSpriteSheet = LoadTexture("assets/images/gem_green.png");
    Texture2D gemOrangeSpriteSheet = LoadTexture("assets/images/gem_orange.png");
    Texture2D gemPurpleSpriteSheet = LoadTexture("assets/images/gem_purple.png");
    Texture2D gemRedSpriteSheet = LoadTexture("assets/images/gem_red.png");
    Texture2D gemTealSpriteSheet = LoadTexture("assets/images/gem_teal.png");

    // Create an initial list of gems
    int gemCount = GRID_SIZE * GRID_SIZE;
    Gem gems[gemCount];

    int gemIndex = 0;
    for (int i = 0; i < GRID_SIZE; i++)
    {
        for (int j = 0; j < GRID_SIZE; j++)
        {
            GemColor color = rand() % 6;
            Texture2D spriteSheet;
            switch (color)
            {
            case GEM_BLUE:
                spriteSheet = gemBlueSpriteSheet;
                break;
            case GEM_GREEN:
                spriteSheet = gemGreenSpriteSheet;
                break;
            case GEM_ORANGE:
                spriteSheet = gemOrangeSpriteSheet;
                break;
            case GEM_PURPLE:
                spriteSheet = gemPurpleSpriteSheet;
                break;
            case GEM_RED:
                spriteSheet = gemRedSpriteSheet;
                break;
            case GEM_TEAL:
                spriteSheet = gemTealSpriteSheet;
                break;
            }
            CreateGem(&gems[gemIndex++], color, spriteSheet, 6, 8, i, j);
        }
    }

    Gem *firstClickedGem = NULL;

    SetTargetFPS(FPS);

    while (!WindowShouldClose())
    {
        float deltaTime = GetFrameTime();

        for (int i = 0; i < gemCount; i++)
        {
            UpdateGemFrame(&gems[i], FPS);
        }

        if (!isAnimating && IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            Vector2 mousePosition = GetMousePosition();
            for (int i = 0; i < gemCount; i++)
            {
                if (CheckCollisionPointRec(mousePosition, gems[i].destRec))
                {
                    if (firstClickedGem == NULL)
                    {
                        firstClickedGem = &gems[i];
                    }
                    else
                    {
                        if (AreGemsAdjacent(firstClickedGem, &gems[i]))
                        {
                            StartGemSwapAnimation(firstClickedGem, &gems[i]);
                        }
                        firstClickedGem = NULL; // Reset after checking
                    }
                    break;
                }
            }
        }

        UpdateGemSwapAnimation(deltaTime);

        BeginDrawing();
        ClearBackground(RAYWHITE);

        for (int i = 0; i < GRID_SIZE; i++)
        {
            for (int j = 0; j < GRID_SIZE; j++)
            {
                DrawRectangle(i * CELL_SIZE, j * CELL_SIZE, CELL_SIZE, CELL_SIZE, LIGHTGRAY);
                DrawRectangleLines(i * CELL_SIZE, j * CELL_SIZE, CELL_SIZE, CELL_SIZE, DARKGRAY);
            }
        }

        for (int i = 0; i < gemCount; i++)
        {
            DrawGem(&gems[i], gemBlueSpriteSheet, gemGreenSpriteSheet, gemOrangeSpriteSheet, gemPurpleSpriteSheet, gemRedSpriteSheet, gemTealSpriteSheet);
        }

        EndDrawing();
    }

    UnloadTexture(gemBlueSpriteSheet);
    UnloadTexture(gemGreenSpriteSheet);
    UnloadTexture(gemOrangeSpriteSheet);
    UnloadTexture(gemPurpleSpriteSheet);
    UnloadTexture(gemRedSpriteSheet);
    UnloadTexture(gemTealSpriteSheet);

    CloseWindow();

    return 0;
}

===== File: gem.h =====
#ifndef GEM_H
#define GEM_H

#include "raylib.h"
#include "constants.h"

typedef enum {
    GEM_BLUE,
    GEM_GREEN,
    GEM_ORANGE,
    GEM_PURPLE,
    GEM_RED,
    GEM_TEAL
} GemColor;

typedef struct {
    Rectangle sourceRec;
    Rectangle destRec;
    Vector2 origin;
    int frameWidth;
    int frameHeight;
    int frameCount;
    int currentFrame;
    int frameCounter;
    int frameSpeed;
    GemColor color;
} Gem;

extern bool isAnimating;

void CreateGem(Gem* gem, GemColor color, Texture2D spriteSheet, int frameCount, int frameSpeed, int x, int y);
void UpdateGemFrame(Gem* gem, int fps);
void DrawGem(Gem* gem, Texture2D blueSheet, Texture2D greenSheet, Texture2D orangeSheet, Texture2D purpleSheet, Texture2D redSheet, Texture2D tealSheet);
bool AreGemsAdjacent(Gem* gem1, Gem* gem2);
void StartGemSwapAnimation(Gem* gem1, Gem* gem2);
void UpdateGemSwapAnimation(float deltaTime);


#endif // GEM_H

===== File: gem.c =====
#include "gem.h"
#include "constants.h"
#include <stdlib.h>
#include <stdbool.h>

bool isAnimating = false;
static Vector2 startPos1, startPos2, endPos1, endPos2;
static float animationProgress = 0.0f;
static const float animationDuration = 0.19f; // Duration of animation in seconds
static Gem* gem1ToSwap = NULL;
static Gem* gem2ToSwap = NULL;

void CreateGem(Gem* gem, GemColor color, Texture2D spriteSheet, int frameCount, int frameSpeed, int x, int y) {
    gem->frameWidth = spriteSheet.width / frameCount;
    gem->frameHeight = spriteSheet.height;
    gem->frameCount = frameCount;
    gem->currentFrame = rand() % frameCount;
    gem->frameCounter = 0;
    gem->frameSpeed = frameSpeed;
    gem->sourceRec = (Rectangle){0, 0, gem->frameWidth, gem->frameHeight};
    gem->destRec = (Rectangle){x * CELL_SIZE, y * CELL_SIZE, (float)CELL_SIZE, (float)CELL_SIZE};
    gem->origin = (Vector2){0.0f, 0.0f};
    gem->color = color;
}

void UpdateGemFrame(Gem* gem, int fps) {
    gem->frameCounter++;
    if (gem->frameCounter >= (fps / gem->frameSpeed)) {
        gem->frameCounter = 0;
        gem->currentFrame++;
        if (gem->currentFrame >= gem->frameCount) {
            gem->currentFrame = 0;
        }
    }
    gem->sourceRec.x = gem->frameWidth * gem->currentFrame;
}

void DrawGem(Gem* gem, Texture2D blueSheet, Texture2D greenSheet, Texture2D orangeSheet, Texture2D purpleSheet, Texture2D redSheet, Texture2D tealSheet) {
    Texture2D spriteSheet;

    switch (gem->color) {
        case GEM_BLUE:
            spriteSheet = blueSheet;
            break;
        case GEM_GREEN:
            spriteSheet = greenSheet;
            break;
        case GEM_ORANGE:
            spriteSheet = orangeSheet;
            break;
        case GEM_PURPLE:
            spriteSheet = purpleSheet;
            break;
        case GEM_RED:
            spriteSheet = redSheet;
            break;
        case GEM_TEAL:
            spriteSheet = tealSheet;
            break;
    }

    DrawTexturePro(spriteSheet, gem->sourceRec, gem->destRec, gem->origin, 0.0f, WHITE);
}

bool AreGemsAdjacent(Gem* gem1, Gem* gem2) {
    if (gem1 == gem2) return false;

    int x1 = gem1->destRec.x / CELL_SIZE;
    int y1 = gem1->destRec.y / CELL_SIZE;
    int x2 = gem2->destRec.x / CELL_SIZE;
    int y2 = gem2->destRec.y / CELL_SIZE;

    if ((x1 == x2 && (y1 == y2 - 1 || y1 == y2 + 1)) ||
        (y1 == y2 && (x1 == x2 - 1 || x1 == x2 + 1))) {
        return true;
    }

    return false;
}

void StartGemSwapAnimation(Gem* gem1, Gem* gem2) {
    isAnimating = true;
    gem1ToSwap = gem1;
    gem2ToSwap = gem2;
    startPos1 = (Vector2){gem1->destRec.x, gem1->destRec.y};
    startPos2 = (Vector2){gem2->destRec.x, gem2->destRec.y};
    endPos1 = startPos2;
    endPos2 = startPos1;
    animationProgress = 0.0f;
}

void UpdateGemSwapAnimation(float deltaTime) {
    if (!isAnimating) return;

    animationProgress += deltaTime / animationDuration;
    if (animationProgress >= 1.0f) {
        animationProgress = 1.0f;
        isAnimating = false;

        // Swap the final positions
        gem1ToSwap->destRec.x = endPos1.x;
        gem1ToSwap->destRec.y = endPos1.y;
        gem2ToSwap->destRec.x = endPos2.x;
        gem2ToSwap->destRec.y = endPos2.y;
    } else {
        // Interpolate the positions
        gem1ToSwap->destRec.x = startPos1.x + (endPos1.x - startPos1.x) * animationProgress;
        gem1ToSwap->destRec.y = startPos1.y + (endPos1.y - startPos1.y) * animationProgress;
        gem2ToSwap->destRec.x = startPos2.x + (endPos2.x - startPos2.x) * animationProgress;
        gem2ToSwap->destRec.y = startPos2.y + (endPos2.y - startPos2.y) * animationProgress;
    }
}

===== File: constants.h =====
#ifndef CONSTANTS_H
#define CONSTANTS_H

#define FPS 60

#define SCREEN_WIDTH 1000
#define SCREEN_HEIGHT 1000

#define GRID_SIZE 10
#define CELL_SIZE 100

#endif // CONSTANTS_H

